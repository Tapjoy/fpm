#!/bin/bash

# bail out if any part of this fails
set -e

# This is the self-extracting installer script for an FPM shell installer package.
# It contains the logic to unpack a tar bzipped archive appended to the end of this script
# and optionally run post install logic.
# Run the package file with -h to see a usage message or look at the print_usage method.
#
# The post install scripts are called with INSTALL_ROOT, INSTALL_DIR and VERBOSE exported
# into the environment for their use.
#
# INSTALL_ROOT = the path passed in with -i or a relative directory of the name of the package
#                file with no extension
# INSTALL_DIR  = the same as INSTALL_ROOT unless -c (capistrano release directory) argumetn
#                is used. Then it is $INSTALL_ROOT/releases/<datestamp>
# CURRENT_DIR  = if -c argument is used, this is set to the $INSTALL_ROOT/current which is
#                symlinked to INSTALL_DIR
# VERBOSE      = is set if the package was called with -v for verbose output
function main() {
    set_install_dir
    
    set_owner

    unpack_payload
    
    run_post_install

    create_symlinks
	
    log "Installation complete."
}

# echos metadata file. A function so that we can have it change after we set INSTALL_ROOT
function fpm_metadata_file(){
    echo "${INSTALL_ROOT}/.install-metadata"
}

# if this slug was installed at this location already we will find a metadata file with the details
# about the installation that we left here. Load from that if available but allow command line args to trump
function load_environment(){
    METADATA=$(fpm_metadata_file)
    if [ -r "${METADATA}" ] ; then
        log "Found existing metadata file '${METADATA}'. Loading previous install details"
        source "${METADATA}"
    fi
}

# write out metadata for future installs
function save_environment(){
    METADATA=$(fpm_metadata_file)
    echo -n "" > ${METADATA} # empty file

    # just piping env to a file doesn't quote the variables. This does. Phew
    env |  while read ENVVAR ; do
        FIRST=true
        if echo $ENVVAR | grep -q "^_=" ; then # _ is a readonly variable
            continue
        fi

        # split the line into spaces on the first = sign then write out the line with quotes
        for THING in ${ENVVAR/=/ } ; do
            if $FIRST ; then        
                echo -n "$THING=\"" >> ${METADATA}
            else
                echo -n $THING >> ${METADATA}
            fi
            FIRST=false
        done
        echo "\"" >> ${METADATA}
    done

    chown ${OWNER} ${METADATA}
}

function set_install_dir(){
    # if INSTALL_ROOT isn't set by parsed args, use basename of package file with no extension
    DEFAULT_DIR=$(echo $(basename $0) | sed -e 's/\.[^\.]*$//')
    INSTALL_DIR=${INSTALL_ROOT:-$DEFAULT_DIR}

    if [ -z "$USE_FLAT_RELEASE_DIRECTORY" ] ; then
        RELEASE_ID=<%= release_id %>
        DATESTAMP=$(date +%Y%m%d%H%M%S)
        INSTALL_DIR="$INSTALL_DIR/releases/${RELEASE_ID:-$DATESTAMP}"
    fi

    if [ -d "${INSTALL_DIR}" ] ; then
        
        if [ -z "${CONFIRM}" ] ; then
            echo "Install directory '${INSTALL_DIR}' already exists. Would you like to delete it? [y/n]"
            read CONFIRM
        fi
        
        if [ "${CONFIRM}" = "y" ] ; then
            log "Clobbering existing installation in ${INSTALL_DIR}"
            rm -rf "${INSTALL_DIR}"
        else
            die "Aborting install because installation directory already exists."
        fi
    fi
    
    mkdir -p "$INSTALL_DIR" || die "Unable to create install directory $INSTALL_DIR"

    export INSTALL_DIR

    log "Installing package to '$INSTALL_DIR'"
}

function set_owner(){
    export OWNER=${OWNER:-$USER}
    log "Installing as user $OWNER"
}

function unpack_payload(){
    log "Unpacking payload . . ."
    archive_line=$(egrep --text --line-number '__ARCHIVE__$' $0 | cut -f1 -d:)
    tail -n +$((archive_line + 1)) $0 | tar -C $INSTALL_DIR -xjf - > /dev/null || die "Failed to unpack payload from the end of '$0' into '$INSTALL_DIR'"
}

function run_post_install(){
    AFTER_INSTALL=$INSTALL_DIR/.fpm/after_install
    if [ -r $AFTER_INSTALL ] ; then
        chmod +x $AFTER_INSTALL
        log "Running post install script"
        $AFTER_INSTALL
	return $?
    fi
    return 0
}

function create_symlinks(){
    [ -n "$USE_FLAT_RELEASE_DIRECTORY" ] && return 

    export CURRENT_DIR="$INSTALL_ROOT/current"
    if [ -e "$CURRENT_DIR" ] ; then
        rm "$CURRENT_DIR"
    fi
    ln -s "$INSTALL_DIR" "$CURRENT_DIR"

    log "Symlinked '$INSTALL_DIR' to '$CURRENT_DIR'"
}

function print_usage(){
    echo "Usage: `basename $0` [options]"
    echo "Install this package"
    echo "  -i <DIRECTORY> : install_root - an optional directory to install to."
    echo "      Default is package file name without file extension"
    echo "  -o <USER>     : owner - the name of the user that will own the files installed"
    echo "                   by the slug. Defaults to current user"
    echo "  -r: disable capistrano style release directories - Default behavior is to create a releases directory inside"
    echo "      install_root and unpack contents into a date stamped (or build time id named) directory under the release"
    echo "      directory. Then create a 'current' symlink under install_root to the unpacked"
    echo "      directory once installation is complete replacing the symlink if it already "
    echo "      exists. If this flag is set just install into install_root directly"
    echo "  -y: yes - Don't prompt to clobber existing installations"
    echo "  -v: verbose - More output on installation"
    echo "  -h: help -  Display this message"
}

function die () {
    local message=$*
    echo "Error: $message : $!"
    exit 1
}

function log(){
    local message=$*
    if [ -n "$VERBOSE" ] ; then
        echo "$*"
    fi
}

function parse_args() {
    args=`getopt i:o:ryvh $*`
    
    if [ $? != 0 ] ; then
        print_usage
        exit 2
    fi
    set -- $args
    for i
    do
        case "$i"
            in
            -r)
                USE_FLAT_RELEASE_DIRECTORY=1
                shift;;
            -i)
                shift;
                export INSTALL_ROOT="$1"
                shift;;
            -o)
                shift;
                export OWNER="$1"
                shift;;
            -v)
                export VERBOSE=1
                shift;;
            -y)
                CONFIRM="y"
                shift;;
            -h)
                print_usage
                exit 0
                shift;;
            --)
                shift; break;;
        esac
    done
}

# parse args first to get install root
parse_args $*
# load environment from previous installations so we get defaults from that
load_environment
# reparse args so they can override any settings from previous installations if provided on the command line
parse_args $*

main
save_environment
exit 0

__ARCHIVE__
